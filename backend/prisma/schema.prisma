generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  status    Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)

  @@map("samples")
}

model User {
  id                   Int                    @id @default(autoincrement())
  phoneNumber          String?                @map("phone_number")
  email                String                 @unique
  password             String
  role                 Role                   @default(USER)
  createdAt            DateTime               @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt            DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  address              String?
  fullName             String                 @map("full_name")
  gender               Gender                 @default(MALE)
  gardens              GardensOnUsers[]
  notificationsOnUsers NotificationsOnUsers[]

  @@map("users")
}

model Device {
  id        Int            @id @default(autoincrement())
  ip        String         @unique
  status    String?
  type      DeviceTypeEnum
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int            @map("garden_id")
  garden    Garden         @relation(fields: [gardenId], references: [id], onDelete: Cascade)

  @@map("devices")
}

model TempAirData {
  id                   Int      @id @default(autoincrement())
  temp                 Float
  tempThreshold        Float?   @map("temp_threshold")
  airHumidity          Float    @map("air_humidity")
  airHumidityThreshold Float?   @map("air_humidity_threshold")
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt            DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId             Int      @map("garden_id")
  deviceId             Int      @map("device_id")

  @@index([deviceId])
  @@index([gardenId, deviceId])
  @@map("temp_air_datas")
}

model HumiData {
  id        Int      @id @default(autoincrement())
  value     Float
  threshold Float?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")

  @@index([deviceId])
  @@index([gardenId, deviceId])
  @@map("humi_datas")
}

model LightData {
  id        Int      @id @default(autoincrement())
  value     Float
  threshold Float?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")

  @@index([deviceId])
  @@index([gardenId, deviceId])
  @@map("light_data")
}

model FanData {
  id        Int      @id @default(autoincrement())
  value     Float?
  status    Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")

  @@index([deviceId])
  @@index([gardenId, deviceId])
  @@map("fan_datas")
}

model PumpData {
  id        Int      @id @default(autoincrement())
  value     Float?
  status    Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")

  @@index([deviceId])
  @@index([gardenId, deviceId])
  @@map("pump_datas")
}

model NebulizerData {
  id        Int      @id @default(autoincrement())
  value     Float?
  status    Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")

  @@index([deviceId])
  @@index([gardenId, deviceId])
  @@map("nebulizer_datas")
}

model LampData {
  id        Int      @id @default(autoincrement())
  status    Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")

  @@index([deviceId])
  @@index([gardenId, deviceId])
  @@map("lamp_datas")
}

model Garden {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  address   String
  width     Int?
  length    Int?
  hight     Int?
  landArea  Int              @map("land_area")
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  devices   Device[]
  users     GardensOnUsers[]

  @@map("gardens")
}

model GardensOnUsers {
  userId    Int      @map("user_id")
  gardenId  Int      @map("garden_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  garden    Garden   @relation(fields: [gardenId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, gardenId])
  @@index([gardenId], map: "gardensOnUsers_garden_id_fkey")
  @@map("gardensOnUsers")
}

model Notification {
  id        Int                    @id @default(autoincrement())
  createdAt DateTime               @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  users     NotificationsOnUsers[]

  @@map("notifications")
}

model NotificationsOnUsers {
  userId         Int          @map("user_id")
  notificationId Int          @map("notification_id")
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt      DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  description    String
  title          String
  notification   Notification @relation(fields: [notificationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@id([userId, notificationId])
  @@index([notificationId], map: "notificationsOnUsers_notification_id_fkey")
  @@map("notificationsOnUsers")
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum DeviceTypeEnum {
  FAN
  LAMP
  NEBULIZER
  PUMP
  LIGHTSENSOR
  HUMISENSOR
  TEMPAIRSENSOR
}
