generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  status    Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)

  @@map("samples")
}

model User {
  id            Int                    @id @default(autoincrement())
  phoneNumber   String?                @map("phone_number")
  email         String                 @unique
  password      String
  role          Role                   @default(USER)
  createdAt     DateTime               @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt     DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  address       String?
  fullName      String                 @map("full_name")
  dateOfBirth   DateTime?              @map("date_of_birth")
  gender        Gender                 @default(MALE)
  gardens       GardensOnUsers[]
  notifications NotificationsOnUsers[]
  Notification  Notification[]
  isDeleted     Boolean                @default(false)

  @@map("users")
}

model Device {
  id           Int            @id @default(autoincrement())
  ip           String         @unique
  status       Boolean        @default(true)
  type         DeviceTypeEnum
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId     Int            @map("garden_id")
  garden       Garden         @relation(fields: [gardenId], references: [id], onDelete: Cascade)
  tempAirDatas TempAirData[]
  humiDatas    HumiData[]
  lightDatas   LightData[]
  fanDatas     FanData[]
  pumpDatas    PumpData[]
  curtainDatas CurtainData[]
  lampDatas    LampData[]
  isDeleted    Boolean        @default(false)

  @@map("devices")
}

model Threshold {
  id            Int               @id @default(autoincrement())
  name          ThresholdNameEnum
  lowThreshold  String?           @map("low_threshold")
  highThreshold String?           @map("high_threshold")
  gardenId      Int               @map("garden_id")
  garden        Garden            @relation(fields: [gardenId], references: [id], onDelete: Cascade)
  createdAt     DateTime          @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt     DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)

  @@map("thresholds")
}

model TempAirData {
  id          Int      @id @default(autoincrement())
  temp        Float
  airHumidity Float    @map("air_humidity")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId    Int      @map("garden_id")
  deviceId    Int      @map("device_id")
  device      Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([deviceId, createdAt])
  @@index([gardenId, deviceId])
  @@map("temp_air_datas")
}

model HumiData {
  id        Int      @id @default(autoincrement())
  value     Float
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([deviceId, createdAt])
  @@index([gardenId, deviceId])
  @@map("humi_datas")
}

model LightData {
  id        Int      @id @default(autoincrement())
  value     Float
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([deviceId, createdAt])
  @@index([gardenId, deviceId])
  @@map("light_data")
}

model FanData {
  id        Int      @id @default(autoincrement())
  value     Float?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  status    Boolean

  @@index([deviceId])
  @@index([deviceId, createdAt])
  @@index([gardenId, deviceId])
  @@map("fan_datas")
}

model PumpData {
  id        Int      @id @default(autoincrement())
  value     Float?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  status    Boolean

  @@index([deviceId])
  @@index([deviceId, createdAt])
  @@index([gardenId, deviceId])
  @@map("pump_datas")
}

model CurtainData {
  id        Int      @id @default(autoincrement())
  value     Float?
  status    Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([deviceId, createdAt])
  @@index([gardenId, deviceId])
  @@map("curtain_datas")
}

model LampData {
  id        Int      @id @default(autoincrement())
  status    Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([deviceId, createdAt])
  @@index([gardenId, deviceId])
  @@map("lamp_datas")
}

model Garden {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  address     String
  width       Int?
  length      Int?
  isAuto      Boolean          @default(true)
  hight       Int?
  landArea    Int              @map("land_area")
  createdAt   DateTime         @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt   DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  isDeleted   Boolean          @default(false)
  coordinates String?
  devices     Device[]
  users       GardensOnUsers[]
  Threshold   Threshold[]

  @@map("gardens")
}

model GardensOnUsers {
  userId    Int        @map("user_id")
  gardenId  Int        @map("garden_id")
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  role      RoleGarden @default(USER)
  garden    Garden     @relation(fields: [gardenId], references: [id])
  user      User       @relation(fields: [userId], references: [id])

  @@id([userId, gardenId])
  @@index([gardenId], map: "gardensOnUsers_garden_id_fkey")
  @@map("gardens_on_users")
}

model Notification {
  id            Int                    @id @default(autoincrement())
  description   String
  title         String
  createdAt     DateTime               @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt     DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  createdBy     Int                    @map("created_by")
  createdByUser User                   @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  users         NotificationsOnUsers[]
  gardenId      Int?                   @map("garden_id")
  type          NotificationType

  @@map("notifications")
}

model NotificationsOnUsers {
  userId         Int          @map("user_id")
  notificationId Int          @map("notification_id")
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt      DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  seen           Boolean      @default(false)
  notification   Notification @relation(fields: [notificationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@id([userId, notificationId])
  @@index([notificationId], map: "notificationsOnUsers_notification_id_fkey")
  @@map("notifications_on_users")
}

enum Role {
  USER
  ADMIN
}

enum RoleGarden {
  MANAGER
  USER
}

enum Gender {
  MALE
  FEMALE
}

enum DeviceTypeEnum {
  FAN
  LAMP
  CURTAIN
  PUMP
  LIGHTSENSOR
  HUMISENSOR
  TEMPAIRSENSOR
}

enum ThresholdNameEnum {
  LIGHTSENSOR
  HUMISENSOR
  TEMPAIRSENSOR
}

enum NotificationType {
  GARDEN
  DEVICE
  OTHER
}
