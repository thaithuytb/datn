generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  status    Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)

  @@map("samples")
}

model User {
  id                   Int                    @id @default(autoincrement())
  phoneNumber          String?                @map("phone_number")
  email                String                 @unique
  password             String
  role                 Role                   @default(USER)
  createdAt            DateTime               @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt            DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  address              String?
  fullName             String                 @map("full_name")
  gender               Gender                 @default(MALE)
  gardens              GardensOnUsers[]
  notificationsOnUsers NotificationsOnUsers[]

  @@map("users")
}

model Device {
  id             Int            @id @default(autoincrement())
  ip             String         @unique
  status         Boolean        @default(true)
  type           DeviceTypeEnum
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt      DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId       Int            @map("garden_id")
  garden         Garden         @relation(fields: [gardenId], references: [id], onDelete: Cascade)
  lowThreshold   String?        @map("low_threshold")
  highThreshold  String?         @map("high_threshold")
  tempAirDatas   TempAirData[]
  humiDatas      HumiData[]
  lightDatas     LightData[]
  fanDatas       FanData[]
  pumpDatas      PumpData[]
  nebulizerDatas NebulizerData[]
  lampDatas      LampData[]

  @@map("devices")
}

model TempAirData {
  id          Int      @id @default(autoincrement())
  temp        Float
  airHumidity Float    @map("air_humidity")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId    Int      @map("garden_id")
  deviceId    Int      @map("device_id")
  device      Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([deviceId, createdAt])
  @@index([gardenId, deviceId])
  @@map("temp_air_datas")
}

model HumiData {
  id        Int      @id @default(autoincrement())
  value     Float
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")
  device      Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([deviceId, createdAt])
  @@index([gardenId, deviceId])
  @@map("humi_datas")
}

model LightData {
  id        Int      @id @default(autoincrement())
  value     Float
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([deviceId, createdAt])
  @@index([gardenId, deviceId])
  @@map("light_data")
}

model FanData {
  id        Int      @id @default(autoincrement())
  value     Float?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  status    Boolean

  @@index([deviceId])
  @@index([deviceId, createdAt])
  @@index([gardenId, deviceId])
  @@map("fan_datas")
}

model PumpData {
  id        Int      @id @default(autoincrement())
  value     Float?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  status    Boolean

  @@index([deviceId])
  @@index([deviceId, createdAt])
  @@index([gardenId, deviceId])
  @@map("pump_datas")
}

model NebulizerData {
  id        Int      @id @default(autoincrement())
  value     Float?
  status    Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([deviceId, createdAt])
  @@index([gardenId, deviceId])
  @@map("nebulizer_datas")
}

model LampData {
  id        Int      @id @default(autoincrement())
  status    Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  gardenId  Int      @map("garden_id")
  deviceId  Int      @map("device_id")
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([deviceId, createdAt])
  @@index([gardenId, deviceId])
  @@map("lamp_datas")
}

model Garden {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  address     String
  width       Int?
  length      Int? 
  isAuto      Boolean          @default(true)
  hight       Int?
  landArea    Int              @map("land_area")
  createdAt   DateTime         @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt   DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  devices     Device[]
  users       GardensOnUsers[]

  @@map("gardens")
}

model GardensOnUsers {
  userId    Int      @map("user_id")
  gardenId  Int      @map("garden_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  garden    Garden   @relation(fields: [gardenId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, gardenId])
  @@index([gardenId], map: "gardensOnUsers_garden_id_fkey")
  @@map("gardens_on_users")
}

model Notification {
  id          Int                    @id @default(autoincrement())
  description String
  title       String
  createdAt   DateTime               @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt   DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  users       NotificationsOnUsers[]

  @@map("notifications")
}

model NotificationsOnUsers {
  userId         Int              @map("user_id")
  notificationId Int              @map("notification_id")
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt      DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(3)
  seen           Boolean          @default(false)
  type           NotificationType
  notification   Notification     @relation(fields: [notificationId], references: [id])
  user           User             @relation(fields: [userId], references: [id])

  @@id([userId, notificationId])
  @@index([notificationId], map: "notificationsOnUsers_notification_id_fkey")
  @@map("notifications_on_users")
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum DeviceTypeEnum {
  FAN
  LAMP
  NEBULIZER
  PUMP
  LIGHTSENSOR
  HUMISENSOR
  TEMPAIRSENSOR
}

enum NotificationType {
  CALENDAR
  NOTION
  OTHER
}
